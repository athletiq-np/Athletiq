{"ast":null,"code":"// src/routes/playerRoutes.js\n\nconst express = require(\"express\");\nconst router = express.Router();\nconst pool = require(\"../config/db\");\nconst authMiddleware = require(\"../middlewares/authMiddleware\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst sharp = require(\"sharp\");\nconst fs = require(\"fs\");\nconst {\n  v4: uuidv4\n} = require(\"uuid\");\n\n// Multer setup for file uploads\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => cb(null, \"uploads/\"),\n  filename: (req, file, cb) => {\n    const ext = path.extname(file.originalname);\n    cb(null, uuidv4() + ext);\n  }\n});\nconst upload = multer({\n  storage\n});\n\n// Helper stub for translation (replace with real API integration later)\nasync function translateName(name, fromLang, toLang) {\n  // Example: call to external translation API would go here\n  // For now, just return the same name\n  return name;\n}\n\n// Utility: resize image to max width 800px, overwrite original\nasync function resizeImage(filePath) {\n  const resizedPath = filePath.replace(/(\\.\\w+)$/, \"_resized$1\");\n  await sharp(filePath).resize({\n    width: 800\n  }).toFile(resizedPath);\n\n  // Delete original file\n  fs.unlinkSync(filePath);\n  return path.basename(resizedPath);\n}\n\n// POST /api/players/register\nrouter.post(\"/register\", authMiddleware, upload.fields([{\n  name: \"photo\",\n  maxCount: 1\n}, {\n  name: \"birthCertificate\",\n  maxCount: 1\n}]), async (req, res) => {\n  try {\n    const {\n      full_name,\n      full_name_eng,\n      full_name_nep,\n      dob,\n      dob_ad,\n      dob_bs,\n      gender,\n      father_name,\n      mother_name,\n      guardian_phone,\n      guardian_email,\n      address\n    } = req.body;\n\n    // Validate required fields\n    if (!(full_name || full_name_eng || full_name_nep) || !(dob || dob_ad || dob_bs) || !father_name || !guardian_phone) {\n      return res.status(400).json({\n        message: \"Required fields missing: full name (English or Nepali), date of birth (AD or BS), father name, guardian phone.\"\n      });\n    }\n\n    // Handle bilingual name translation\n    let engName = full_name_eng || (full_name && /^[a-zA-Z\\s]+$/.test(full_name) ? full_name : null);\n    let nepName = full_name_nep || (full_name && /[\\u0900-\\u097F]/.test(full_name) ? full_name : null);\n\n    // If only one provided, translate to the other language\n    if (!engName && nepName) {\n      engName = await translateName(nepName, \"nep\", \"eng\");\n    }\n    if (!nepName && engName) {\n      nepName = await translateName(engName, \"eng\", \"nep\");\n    }\n\n    // Handle date of birth conversion (stub)\n    let dobAd = dob_ad || dob;\n    let dobBs = dob_bs || dob;\n\n    // TODO: Implement real BS <-> AD conversion here\n    // For now, if both missing, send error\n    if (!dobAd && !dobBs) {\n      return res.status(400).json({\n        message: \"Date of birth required in either AD or BS.\"\n      });\n    }\n\n    // Resize uploaded images if any\n    let photoFilename = null;\n    if (req.files.photo) {\n      const originalPath = req.files.photo[0].path;\n      photoFilename = await resizeImage(originalPath);\n    }\n    let certFilename = null;\n    if (req.files.birthCertificate) {\n      const originalPath = req.files.birthCertificate[0].path;\n      certFilename = await resizeImage(originalPath);\n    }\n\n    // TODO: Add duplicate detection logic here (based on name, father_name, dob, guardian_phone)\n\n    // Use req.user.id as the guardian user ID\n    const userId = req.user.id;\n\n    // Insert player into DB\n    const playerInsert = `\n        INSERT INTO players\n          (user_id, full_name_eng, full_name_nep, dob_ad, dob_bs, gender, father_name, mother_name,\n           guardian_phone, guardian_email, address, photo_url, birth_certificate_url, created_at)\n        VALUES\n          ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, NOW())\n        RETURNING *\n      `;\n    const values = [userId, engName, nepName, dobAd, dobBs, gender || null, father_name, mother_name || null, guardian_phone, guardian_email || null, address || null, photoFilename, certFilename];\n    const result = await pool.query(playerInsert, values);\n    res.json({\n      message: \"Player registered successfully!\",\n      player: result.rows[0]\n    });\n  } catch (err) {\n    console.error(\"Player registration error:\", err);\n    res.status(500).json({\n      message: \"Server error during player registration.\"\n    });\n  }\n});\nmodule.exports = router;\n\n/**\r\n * ONBOARDING NOTES:\r\n * - Accepts bilingual names, auto-translates missing language (stub).\r\n * - Accepts DOB in AD or BS calendar, stores both (date conversion stub).\r\n * - Resizes uploaded photo and birth certificate images to max width 800px.\r\n * - Validates required fields and handles optional ones.\r\n * - Duplicate detection and BS/AD conversion should be implemented separately.\r\n * - Player linked to authenticated user's ID (guardian).\r\n */","map":{"version":3,"names":["express","require","router","Router","pool","authMiddleware","multer","path","sharp","fs","v4","uuidv4","storage","diskStorage","destination","req","file","cb","filename","ext","extname","originalname","upload","translateName","name","fromLang","toLang","resizeImage","filePath","resizedPath","replace","resize","width","toFile","unlinkSync","basename","post","fields","maxCount","res","full_name","full_name_eng","full_name_nep","dob","dob_ad","dob_bs","gender","father_name","mother_name","guardian_phone","guardian_email","address","body","status","json","message","engName","test","nepName","dobAd","dobBs","photoFilename","files","photo","originalPath","certFilename","birthCertificate","userId","user","id","playerInsert","values","result","query","player","rows","err","console","error","module","exports"],"sources":["E:/Athletiq Project/atheletiq-frontend/athletiq-web/src/pages/PlayerRegister.js"],"sourcesContent":["// src/routes/playerRoutes.js\r\n\r\nconst express = require(\"express\");\r\nconst router = express.Router();\r\nconst pool = require(\"../config/db\");\r\nconst authMiddleware = require(\"../middlewares/authMiddleware\");\r\nconst multer = require(\"multer\");\r\nconst path = require(\"path\");\r\nconst sharp = require(\"sharp\");\r\nconst fs = require(\"fs\");\r\nconst { v4: uuidv4 } = require(\"uuid\");\r\n\r\n// Multer setup for file uploads\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => cb(null, \"uploads/\"),\r\n  filename: (req, file, cb) => {\r\n    const ext = path.extname(file.originalname);\r\n    cb(null, uuidv4() + ext);\r\n  },\r\n});\r\nconst upload = multer({ storage });\r\n\r\n// Helper stub for translation (replace with real API integration later)\r\nasync function translateName(name, fromLang, toLang) {\r\n  // Example: call to external translation API would go here\r\n  // For now, just return the same name\r\n  return name;\r\n}\r\n\r\n// Utility: resize image to max width 800px, overwrite original\r\nasync function resizeImage(filePath) {\r\n  const resizedPath = filePath.replace(/(\\.\\w+)$/, \"_resized$1\");\r\n  await sharp(filePath)\r\n    .resize({ width: 800 })\r\n    .toFile(resizedPath);\r\n\r\n  // Delete original file\r\n  fs.unlinkSync(filePath);\r\n\r\n  return path.basename(resizedPath);\r\n}\r\n\r\n// POST /api/players/register\r\nrouter.post(\r\n  \"/register\",\r\n  authMiddleware,\r\n  upload.fields([\r\n    { name: \"photo\", maxCount: 1 },\r\n    { name: \"birthCertificate\", maxCount: 1 },\r\n  ]),\r\n  async (req, res) => {\r\n    try {\r\n      const {\r\n        full_name,\r\n        full_name_eng,\r\n        full_name_nep,\r\n        dob,\r\n        dob_ad,\r\n        dob_bs,\r\n        gender,\r\n        father_name,\r\n        mother_name,\r\n        guardian_phone,\r\n        guardian_email,\r\n        address,\r\n      } = req.body;\r\n\r\n      // Validate required fields\r\n      if (\r\n        !(full_name || full_name_eng || full_name_nep) ||\r\n        !(dob || dob_ad || dob_bs) ||\r\n        !father_name ||\r\n        !guardian_phone\r\n      ) {\r\n        return res.status(400).json({\r\n          message:\r\n            \"Required fields missing: full name (English or Nepali), date of birth (AD or BS), father name, guardian phone.\",\r\n        });\r\n      }\r\n\r\n      // Handle bilingual name translation\r\n      let engName = full_name_eng || (full_name && /^[a-zA-Z\\s]+$/.test(full_name) ? full_name : null);\r\n      let nepName = full_name_nep || (full_name && /[\\u0900-\\u097F]/.test(full_name) ? full_name : null);\r\n\r\n      // If only one provided, translate to the other language\r\n      if (!engName && nepName) {\r\n        engName = await translateName(nepName, \"nep\", \"eng\");\r\n      }\r\n      if (!nepName && engName) {\r\n        nepName = await translateName(engName, \"eng\", \"nep\");\r\n      }\r\n\r\n      // Handle date of birth conversion (stub)\r\n      let dobAd = dob_ad || dob;\r\n      let dobBs = dob_bs || dob;\r\n\r\n      // TODO: Implement real BS <-> AD conversion here\r\n      // For now, if both missing, send error\r\n      if (!dobAd && !dobBs) {\r\n        return res.status(400).json({ message: \"Date of birth required in either AD or BS.\" });\r\n      }\r\n\r\n      // Resize uploaded images if any\r\n      let photoFilename = null;\r\n      if (req.files.photo) {\r\n        const originalPath = req.files.photo[0].path;\r\n        photoFilename = await resizeImage(originalPath);\r\n      }\r\n\r\n      let certFilename = null;\r\n      if (req.files.birthCertificate) {\r\n        const originalPath = req.files.birthCertificate[0].path;\r\n        certFilename = await resizeImage(originalPath);\r\n      }\r\n\r\n      // TODO: Add duplicate detection logic here (based on name, father_name, dob, guardian_phone)\r\n\r\n      // Use req.user.id as the guardian user ID\r\n      const userId = req.user.id;\r\n\r\n      // Insert player into DB\r\n      const playerInsert = `\r\n        INSERT INTO players\r\n          (user_id, full_name_eng, full_name_nep, dob_ad, dob_bs, gender, father_name, mother_name,\r\n           guardian_phone, guardian_email, address, photo_url, birth_certificate_url, created_at)\r\n        VALUES\r\n          ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, NOW())\r\n        RETURNING *\r\n      `;\r\n      const values = [\r\n        userId,\r\n        engName,\r\n        nepName,\r\n        dobAd,\r\n        dobBs,\r\n        gender || null,\r\n        father_name,\r\n        mother_name || null,\r\n        guardian_phone,\r\n        guardian_email || null,\r\n        address || null,\r\n        photoFilename,\r\n        certFilename,\r\n      ];\r\n\r\n      const result = await pool.query(playerInsert, values);\r\n\r\n      res.json({\r\n        message: \"Player registered successfully!\",\r\n        player: result.rows[0],\r\n      });\r\n    } catch (err) {\r\n      console.error(\"Player registration error:\", err);\r\n      res.status(500).json({ message: \"Server error during player registration.\" });\r\n    }\r\n  }\r\n);\r\n\r\nmodule.exports = router;\r\n\r\n/**\r\n * ONBOARDING NOTES:\r\n * - Accepts bilingual names, auto-translates missing language (stub).\r\n * - Accepts DOB in AD or BS calendar, stores both (date conversion stub).\r\n * - Resizes uploaded photo and birth certificate images to max width 800px.\r\n * - Validates required fields and handles optional ones.\r\n * - Duplicate detection and BS/AD conversion should be implemented separately.\r\n * - Player linked to authenticated user's ID (guardian).\r\n */\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}