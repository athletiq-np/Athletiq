{"ast":null,"code":"var NepaliNumber = /** @class */function () {\n  function NepaliNumber(numberString) {\n    this.outputLocale = \"en\";\n    this.numberString = \"\";\n    this.supportedLocale = [\"en\", \"ne\"];\n    this.supportedNumberType = [\"en-IN\", \"en-US\"];\n    this.digitMapping = [\"०\", \"१\", \"२\", \"३\", \"४\", \"५\", \"६\", \"७\", \"८\", \"९\"];\n    if (numberString) {\n      this.setNumber(numberString);\n    }\n  }\n  NepaliNumber.prototype.setOutputLocale = function (locale) {\n    if (!this.supportedLocale.includes(locale)) {\n      throw new TypeError(\"Currently 'ne' and 'en' only supported as a `locale` parameter.\");\n    }\n    this.outputLocale = locale;\n    return this;\n  };\n  NepaliNumber.prototype.setNumber = function (numberString) {\n    this.numberString = \"\" + numberString;\n    return this;\n  };\n  NepaliNumber.prototype.toNepali = function (numberString) {\n    var _this = this;\n    numberString = numberString || this.numberString;\n    if (!numberString) {\n      return \"\";\n    }\n    return numberString.toString().split(\"\").map(function (char) {\n      // tslint:disable-next-line:radix\n      if (isNaN(parseInt(char))) {\n        return char;\n      }\n      return _this.digitMapping[char] || char;\n    }).join(\"\");\n  };\n  NepaliNumber.prototype.toEnglish = function (numberString) {\n    var _this = this;\n    numberString = numberString || this.numberString;\n    if (!numberString) {\n      return \"\";\n    }\n    return numberString.toString().split(\"\").map(function (char) {\n      var englishDigit = _this.digitMapping.findIndex(function (digit) {\n        return digit === char;\n      });\n      return englishDigit === -1 ? char : \"\" + englishDigit;\n    }).join(\"\");\n  };\n  NepaliNumber.prototype.formatNumber = function (type) {\n    if (!this.supportedNumberType.includes(type)) {\n      throw new TypeError(\"Currently 'en-US' and 'en-IN' only supported as a `type` parameter.\");\n    }\n    // tslint:disable-next-line:radix\n    var englishNumber = parseFloat(this.toEnglish());\n    if (isNaN(englishNumber)) {\n      return this.numberString;\n    }\n    var formatted = new Intl.NumberFormat(type).format(englishNumber);\n    return this.outputLocale === \"en\" ? this.toEnglish(formatted) : this.toNepali(formatted);\n  };\n  NepaliNumber.prototype.formatAmount = function (type, precision) {\n    if (precision === void 0) {\n      precision = 2;\n    }\n    if (!this.supportedNumberType.includes(type)) {\n      throw new TypeError(\"Currently 'en-US' and 'en-IN' only supported as a `type` parameter.\");\n    }\n    // tslint:disable-next-line:radix\n    var englishAmount = parseFloat(this.toEnglish());\n    if (isNaN(englishAmount)) {\n      return this.numberString;\n    }\n    var formatted = new Intl.NumberFormat(type, {\n      maximumFractionDigits: precision,\n      minimumFractionDigits: precision\n    }).format(englishAmount);\n    return this.outputLocale === \"en\" ? this.toEnglish(formatted) : this.toNepali(formatted);\n  };\n  return NepaliNumber;\n}();\nvar englishToNepaliNumber = function (numberString) {\n  return new NepaliNumber().setNumber(numberString).toNepali();\n};\nvar nepaliToEnglishNumber = function (numberString) {\n  return new NepaliNumber().setNumber(numberString).toEnglish();\n};\nvar nepaliNumberFormat = function (numberString, locale) {\n  if (locale === void 0) {\n    locale = \"en\";\n  }\n  return new NepaliNumber().setOutputLocale(locale).setNumber(numberString).formatNumber(\"en-IN\");\n};\nvar englishNumberFormat = function (numberString, locale) {\n  if (locale === void 0) {\n    locale = \"en\";\n  }\n  return new NepaliNumber().setOutputLocale(locale).setNumber(numberString).formatNumber(\"en-US\");\n};\nvar nepaliAmountFormat = function (numberString, precision, locale) {\n  if (precision === void 0) {\n    precision = 2;\n  }\n  if (locale === void 0) {\n    locale = \"en\";\n  }\n  return new NepaliNumber().setOutputLocale(locale).setNumber(numberString).formatAmount(\"en-IN\", precision);\n};\nvar englishAmountFormat = function (numberString, precision, locale) {\n  if (precision === void 0) {\n    precision = 2;\n  }\n  if (locale === void 0) {\n    locale = \"en\";\n  }\n  return new NepaliNumber().setOutputLocale(locale).setNumber(numberString).formatAmount(\"en-US\", precision);\n};\nexport { englishAmountFormat, englishNumberFormat, englishToNepaliNumber, nepaliAmountFormat, nepaliNumberFormat, nepaliToEnglishNumber };","map":{"version":3,"names":["NepaliNumber","numberString","outputLocale","supportedLocale","supportedNumberType","digitMapping","setNumber","prototype","setOutputLocale","locale","includes","TypeError","toNepali","_this","toString","split","map","char","isNaN","parseInt","join","toEnglish","englishDigit","findIndex","digit","formatNumber","type","englishNumber","parseFloat","formatted","Intl","NumberFormat","format","formatAmount","precision","englishAmount","maximumFractionDigits","minimumFractionDigits","englishToNepaliNumber","nepaliToEnglishNumber","nepaliNumberFormat","englishNumberFormat","nepaliAmountFormat","englishAmountFormat"],"sources":["E:\\Athletiq Project\\atheletiq-frontend\\athletiq-web\\node_modules\\nepali-number\\src\\NepaliNumber.ts","E:\\Athletiq Project\\atheletiq-frontend\\athletiq-web\\node_modules\\nepali-number\\src\\NepaliNumberHelpers.ts"],"sourcesContent":["class NepaliNumber {\n    private outputLocale: string = \"en\"\n    private numberString: string = \"\"\n    private supportedLocale: string[] = [\"en\", \"ne\"]\n    private supportedNumberType: string[] = [\"en-IN\", \"en-US\"]\n    private digitMapping: string[] = [\"०\", \"१\", \"२\", \"३\", \"४\", \"५\", \"६\", \"७\", \"८\", \"९\"]\n\n    constructor(numberString?: number) {\n        if (numberString) {\n            this.setNumber(numberString)\n        }\n    }\n\n    public setOutputLocale(locale: string): NepaliNumber {\n        if (!this.supportedLocale.includes(locale)) {\n            throw new TypeError(\"Currently 'ne' and 'en' only supported as a `locale` parameter.\")\n        }\n\n        this.outputLocale = locale\n\n        return this\n    }\n\n    public setNumber(numberString: string | number): NepaliNumber {\n        this.numberString = `${numberString}`\n\n        return this\n    }\n\n    public toNepali(numberString?: string | number): string {\n        numberString = numberString || this.numberString\n        if (!numberString) {\n            return \"\"\n        }\n\n        return numberString\n            .toString()\n            .split(\"\")\n            .map((char: string): string => {\n                // tslint:disable-next-line:radix\n                if (isNaN(parseInt(char))) {\n                    return char\n                }\n\n                return this.digitMapping[char] || char\n            })\n            .join(\"\")\n    }\n\n    public toEnglish(numberString?: string): string {\n        numberString = numberString || this.numberString\n        if (!numberString) {\n            return \"\"\n        }\n\n        return numberString\n            .toString()\n            .split(\"\")\n            .map((char: string): string => {\n                const englishDigit = this.digitMapping.findIndex((digit): boolean => digit === char)\n\n                return englishDigit === -1 ? char : `${englishDigit}`\n            })\n            .join(\"\")\n    }\n\n    public formatNumber(type: string): string {\n        if (!this.supportedNumberType.includes(type)) {\n            throw new TypeError(\"Currently 'en-US' and 'en-IN' only supported as a `type` parameter.\")\n        }\n\n        // tslint:disable-next-line:radix\n        const englishNumber = parseFloat(this.toEnglish())\n        if (isNaN(englishNumber)) {\n            return this.numberString\n        }\n\n        const formatted = new Intl.NumberFormat(type).format(englishNumber)\n\n        return this.outputLocale === \"en\" ? this.toEnglish(formatted) : this.toNepali(formatted)\n    }\n\n    public formatAmount(type: string, precision: number = 2): string {\n        if (!this.supportedNumberType.includes(type)) {\n            throw new TypeError(\"Currently 'en-US' and 'en-IN' only supported as a `type` parameter.\")\n        }\n\n        // tslint:disable-next-line:radix\n        const englishAmount = parseFloat(this.toEnglish())\n        if (isNaN(englishAmount)) {\n            return this.numberString\n        }\n\n        const formatted = new Intl.NumberFormat(type, {\n            maximumFractionDigits: precision,\n            minimumFractionDigits: precision,\n        }).format(englishAmount)\n\n        return this.outputLocale === \"en\" ? this.toEnglish(formatted) : this.toNepali(formatted)\n    }\n}\n\nexport default NepaliNumber\n","import NepaliNumber from \"./NepaliNumber\"\n\nexport const englishToNepaliNumber = (numberString: string | number): string =>\n    new NepaliNumber().setNumber(numberString).toNepali()\n\nexport const nepaliToEnglishNumber = (numberString: string): string =>\n    new NepaliNumber().setNumber(numberString).toEnglish()\n\nexport const nepaliNumberFormat = (numberString: string | number, locale: string = \"en\") =>\n    new NepaliNumber()\n        .setOutputLocale(locale)\n        .setNumber(numberString)\n        .formatNumber(\"en-IN\")\nexport const englishNumberFormat = (numberString: string | number, locale: string = \"en\") =>\n    new NepaliNumber()\n        .setOutputLocale(locale)\n        .setNumber(numberString)\n        .formatNumber(\"en-US\")\n\nexport const nepaliAmountFormat = (numberString: string | number, precision: number = 2, locale: string = \"en\") =>\n    new NepaliNumber()\n        .setOutputLocale(locale)\n        .setNumber(numberString)\n        .formatAmount(\"en-IN\", precision)\nexport const englishAmountFormat = (numberString: string | number, precision: number = 2, locale: string = \"en\") =>\n    new NepaliNumber()\n        .setOutputLocale(locale)\n        .setNumber(numberString)\n        .formatAmount(\"en-US\", precision)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}