{"ast":null,"code":"var Config = {\n  maxBSYear: 2100,\n  minBSYear: 1970,\n  outputSeparator: \"-\",\n  bsMonthTotalDaysCount: [[30, 31], [31, 32], [31, 32], [31, 32], [31, 32], [30, 31], [29, 30], [29, 30], [29, 30], [29, 30], [29, 30], [30, 31]],\n  monthReferences: [[0, 1, 1, 22, 1, 3, 1, 1, 1, 3, 1, 22, 1, 3, 1, 3, 1, 22, 1, 3, 1, 19, 1, 3, 1, 1, 3, 1, 2, 2, 1, 3, 1], [1, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 3, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 3, 1, 1, 2], [0, 1, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 3, 1, 1, 2], [1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 2, 1, 3, 1, 2, 2, 2, 1, 2], [59, 1, 26, 1, 28, 1, 2, 1, 12], [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 1, 1, 2, 2, 1, 3, 1, 2, 1, 2], [0, 12, 1, 3, 1, 3, 1, 5, 1, 11, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 27, 1, 2], [1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 3, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 15, 2, 4], [0, 1, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 3, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 15, 2, 4], [1, 1, 3, 1, 3, 1, 14, 1, 3, 1, 1, 1, 3, 1, 14, 1, 3, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 3, 1, 14, 1, 3, 15, 1, 2, 1, 1], [0, 1, 1, 3, 1, 3, 1, 10, 1, 3, 1, 3, 1, 1, 1, 3, 1, 3, 1, 10, 1, 3, 1, 3, 1, 3, 1, 3, 1, 14, 1, 3, 1, 3, 1, 3, 1, 3, 1, 10, 1, 20, 1, 1, 1], [1, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 20, 3]],\n  referenceDate: {\n    AD: \"1913-03-13\",\n    BS: \"1970-01-01\"\n  }\n};\nvar Validator = /** @class */function () {\n  function Validator() {}\n  Validator.dateType = function (type) {\n    if (![\"BS\", \"AD\"].includes(type)) {\n      throw new TypeError(\"Invalid date type. Only 'AD' or 'BS' type supported.\");\n    }\n    return true;\n  };\n  Validator.adYear = function (year) {\n    var minAdYear = Config.minBSYear - 57;\n    var maxAdYear = Config.maxBSYear - 57;\n    if (year < minAdYear || year > maxAdYear) {\n      throw new RangeError(\"AD year should be in range of \" + minAdYear + \" to \" + maxAdYear);\n    }\n  };\n  Validator.adMonth = function (month) {\n    if (month < 1 || month > 12) {\n      throw new RangeError(\"AD month should be in range of 1 to 12\");\n    }\n  };\n  Validator.adDay = function (day) {\n    if (day < 1 || day > 31) {\n      throw new RangeError(\"AD day should be in range of 1 to 31\");\n    }\n  };\n  Validator.bsYear = function (year) {\n    var midBsYear = Config.minBSYear;\n    var maxBsYear = Config.maxBSYear;\n    if (year < midBsYear || year > maxBsYear) {\n      throw new RangeError(\"BS year should be in range of \" + midBsYear + \" to \" + maxBsYear);\n    }\n  };\n  Validator.bsMonth = function (month) {\n    if (month < 1 || month > 12) {\n      throw new RangeError(\"BS month should be in range of 1 to 12\");\n    }\n  };\n  Validator.bsDay = function (day) {\n    if (day < 1 || day > 32) {\n      throw new RangeError(\"BS day should be in range of 1 to 32\");\n    }\n  };\n  return Validator;\n}();\nvar BikramSambat = /** @class */function () {\n  function BikramSambat(date, type) {\n    if (type === void 0) {\n      type = \"AD\";\n    }\n    this.dateType = \"AD\";\n    this.date = {\n      year: 0,\n      month: 0,\n      day: 0\n    };\n    if (date) {\n      this.setDate(date, type);\n    } else {\n      this.setDate(new Date());\n    }\n  }\n  BikramSambat.prototype.setDate = function (date, type) {\n    if (type === void 0) {\n      type = \"AD\";\n    }\n    Validator.dateType(type);\n    if (type === \"BS\") {\n      if (typeof date !== \"string\") {\n        throw new TypeError(\"BS date should be 'string' type.\");\n      }\n      this.dateType = \"BS\";\n      this.date = this.splitBsDate(date);\n      return this;\n    }\n    this.dateType = \"AD\";\n    this.date = this.splitAdDate(date);\n    return this;\n  };\n  BikramSambat.prototype.toAD = function () {\n    if (this.dateType === \"AD\") {\n      return this.format(this.date);\n    }\n    var totalDaysSince = this.totalDaysSince();\n    var _a = this.splitDate(Config.referenceDate.AD),\n      year = _a.year,\n      month = _a.month,\n      day = _a.day;\n    var adDate = new Date(year, month, day - 1);\n    adDate.setDate(adDate.getDate() + totalDaysSince);\n    return this.format(this.splitAdDate(adDate));\n  };\n  BikramSambat.prototype.toBS = function () {\n    if (this.dateType === \"BS\") {\n      return this.format(this.date);\n    }\n    var _a = this.date,\n      adYear = _a.year,\n      adMonth = _a.month,\n      adDay = _a.day;\n    var bsYear = adYear + 57;\n    var bsMonth = (adMonth + 9) % 12 || 12;\n    var bsDay = 1;\n    if (adMonth < 4) {\n      bsYear -= 1;\n    } else if (adMonth === 4) {\n      var bsNewYearAdDate = new BikramSambat(this.format({\n        year: bsYear,\n        month: 1,\n        day: 1\n      }), \"BS\").toAD();\n      if (adDay < new Date(bsNewYearAdDate).getDate()) {\n        bsYear -= 1;\n      }\n    }\n    var bsFirstDayOfMonthAdDate = new Date(new BikramSambat(this.format({\n      year: bsYear,\n      month: bsMonth,\n      day: 1\n    }), \"BS\").toAD());\n    if (adDay >= 1 && adDay < bsFirstDayOfMonthAdDate.getDate()) {\n      bsMonth = bsMonth !== 1 ? bsMonth - 1 : 12;\n      var daysInBSMonth = this.daysInBsMonth(bsYear, bsMonth);\n      bsDay = daysInBSMonth - (bsFirstDayOfMonthAdDate.getDate() - adDay) + 1;\n    } else {\n      bsDay = adDay - bsFirstDayOfMonthAdDate.getDate() + 1;\n    }\n    return this.format({\n      year: bsYear,\n      month: bsMonth,\n      day: bsDay\n    });\n  };\n  /**\r\n   * Calculate total number of days since minimum reference date\r\n   */\n  BikramSambat.prototype.totalDaysSince = function () {\n    var _a = this.date,\n      bsYear = _a.year,\n      bsMonth = _a.month,\n      bsDay = _a.day;\n    var totalDays = 0;\n    var diffInYears = bsYear - Config.minBSYear;\n    for (var i = 1; i <= 12; i++) {\n      totalDays += this.totalMonthDaysSince(i, i < bsMonth ? diffInYears + 1 : diffInYears);\n    }\n    if (bsYear > 2085 && bsYear < 2088) {\n      totalDays += bsDay - 2;\n    } else if (bsYear === 2085 && bsMonth > 5) {\n      totalDays += bsDay - 2;\n    } else if (bsYear === 2081 && bsMonth === 3) {\n      totalDays += bsDay + 1;\n    } else if (bsYear === 2081 && bsMonth === 12) {\n      totalDays += bsDay - 1;\n    } else if (bsYear > 2088) {\n      totalDays += bsDay - 4;\n    } else if (bsYear === 2088 && bsMonth > 5) {\n      totalDays += bsDay - 4;\n    } else {\n      totalDays += bsDay;\n    }\n    return totalDays;\n  };\n  /**\r\n   * Total number of bsMonth days since minimum reference date\r\n   * @param bsMonth\r\n   * @param diffInYear\r\n   */\n  BikramSambat.prototype.totalMonthDaysSince = function (bsMonth, diffInYear) {\n    if (diffInYear === 0) {\n      return 0;\n    }\n    var monthData = Config.monthReferences[bsMonth - 1];\n    var calculated = monthData.slice(0).reduce(function (total, monthDataItem, monthIndex, arr) {\n      if (monthDataItem === 0) {\n        return total;\n      }\n      var monthTotalDaysCountIndex = monthIndex % 2;\n      if (diffInYear > total.year + monthDataItem) {\n        total.year += monthDataItem;\n        total.month += Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex] * monthDataItem;\n      } else {\n        total.month += Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex] * (diffInYear - total.year);\n        total.year = diffInYear - total.year;\n        arr.splice(1); // break; dont forget slice(0) before reducing https://stackoverflow.com/questions/36144406/how-to-break-on-reduce-method\n      }\n      return total;\n    }, {\n      month: 0,\n      year: 0\n    });\n    return calculated.month;\n  };\n  // noinspection JSMethodCanBeStatic\n  /**\r\n   * Returns total number of days in bsMonth for bsYear\r\n   * @param bsYear\r\n   * @param bsMonth\r\n   */\n  BikramSambat.prototype.daysInBsMonth = function (bsYear, bsMonth) {\n    var totalYears = bsYear + 1 - Config.minBSYear;\n    var monthData = Config.monthReferences[bsMonth - 1];\n    var yearCount = 0;\n    for (var i = 0; i < monthData.length; i++) {\n      if (monthData[i] === 0) {\n        continue;\n      }\n      var monthTotalDaysCountIndex = i % 2;\n      yearCount += monthData[i];\n      if (totalYears <= yearCount) {\n        if (bsYear === 2085 && bsMonth === 5 || bsYear === 2088 && bsMonth === 5) {\n          return Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex] - 2;\n        } else if (bsYear === 2081 && bsMonth === 2) {\n          return Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex + 1];\n        } else if (bsYear === 2081 && bsMonth === 3) {\n          return Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex - 1];\n        } else if (bsYear === 2081 && bsMonth === 11) {\n          return Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex] - 1;\n        } else if (bsYear === 2081 && bsMonth === 12) {\n          return Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex] + 1;\n        } else {\n          return Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex];\n        }\n      }\n    }\n    return 0;\n  };\n  BikramSambat.prototype.splitDate = function (date) {\n    // tslint:disable-next-line:radix\n    var _a = date.replace(/\\//g, \"-\").split(\"-\").map(function (d) {\n        return Math.floor(Number(d));\n      }),\n      year = _a[0],\n      month = _a[1],\n      day = _a[2];\n    return {\n      year: year,\n      month: month,\n      day: day\n    };\n  };\n  // noinspection JSMethodCanBeStatic\n  BikramSambat.prototype.splitAdDate = function (date) {\n    if (typeof date === \"string\") {\n      date = new Date(date);\n    }\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n    Validator.adYear(year);\n    Validator.adMonth(month);\n    Validator.adDay(day);\n    return {\n      year: year,\n      month: month,\n      day: day\n    };\n  };\n  BikramSambat.prototype.splitBsDate = function (date) {\n    var _a = this.splitDate(date),\n      year = _a.year,\n      month = _a.month,\n      day = _a.day;\n    Validator.bsYear(year);\n    Validator.bsMonth(month);\n    Validator.bsDay(day);\n    return {\n      year: year,\n      month: month,\n      day: day\n    };\n  };\n  BikramSambat.prototype.format = function (date) {\n    var separator = Config.outputSeparator;\n    var year = date.year,\n      month = date.month,\n      day = date.day;\n    return \"\" + year + separator + this.zeroPad(month) + separator + this.zeroPad(day);\n  };\n  // noinspection JSMethodCanBeStatic\n  BikramSambat.prototype.zeroPad = function (x) {\n    return x > 9 ? \"\" + x : \"0\" + x;\n  };\n  return BikramSambat;\n}();\nvar BSToAD = function (date) {\n  return new BikramSambat().setDate(date, \"BS\").toAD();\n};\nvar ADToBS = function (date) {\n  return new BikramSambat().setDate(date, \"AD\").toBS();\n};\nexport default BikramSambat;\nexport { ADToBS, BSToAD };","map":{"version":3,"names":["Config","maxBSYear","minBSYear","outputSeparator","bsMonthTotalDaysCount","monthReferences","referenceDate","AD","BS","Validator","dateType","type","includes","TypeError","adYear","year","minAdYear","maxAdYear","RangeError","adMonth","month","adDay","day","bsYear","midBsYear","maxBsYear","bsMonth","bsDay","BikramSambat","date","setDate","Date","prototype","splitBsDate","splitAdDate","toAD","format","totalDaysSince","_a","splitDate","adDate","getDate","toBS","bsNewYearAdDate","bsFirstDayOfMonthAdDate","daysInBSMonth","daysInBsMonth","totalDays","diffInYears","i","totalMonthDaysSince","diffInYear","monthData","calculated","slice","reduce","total","monthDataItem","monthIndex","arr","monthTotalDaysCountIndex","splice","totalYears","yearCount","length","getFullYear","getMonth","separator","zeroPad","x","BSToAD","ADToBS"],"sources":["E:\\Athletiq Project\\atheletiq-frontend\\athletiq-web\\node_modules\\bikram-sambat-js\\src\\Config.ts","E:\\Athletiq Project\\atheletiq-frontend\\athletiq-web\\node_modules\\bikram-sambat-js\\src\\Validator.ts","E:\\Athletiq Project\\atheletiq-frontend\\athletiq-web\\node_modules\\bikram-sambat-js\\src\\BikramSambat.ts","E:\\Athletiq Project\\atheletiq-frontend\\athletiq-web\\node_modules\\bikram-sambat-js\\src\\Helper.ts"],"sourcesContent":["interface BikramSambatConfig {\n    minBSYear: number\n    maxBSYear: number\n\n    bsMonthTotalDaysCount: number[][]\n    monthReferences: number[][]\n    referenceDate: {\n        AD: string\n        BS: string\n    }\n\n    outputSeparator: string\n}\n\nconst Config: BikramSambatConfig = {\n    maxBSYear: 2100,\n    minBSYear: 1970,\n\n    outputSeparator: \"-\",\n\n    bsMonthTotalDaysCount: [\n        [30, 31],\n        [31, 32],\n        [31, 32],\n        [31, 32],\n        [31, 32],\n        [30, 31],\n        [29, 30],\n        [29, 30],\n        [29, 30],\n        [29, 30],\n        [29, 30],\n        [30, 31],\n    ],\n\n    monthReferences: [\n        [0, 1, 1, 22, 1, 3, 1, 1, 1, 3, 1, 22, 1, 3, 1, 3, 1, 22, 1, 3, 1, 19, 1, 3, 1, 1, 3, 1, 2, 2, 1, 3, 1],\n        [\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            3,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            1,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            1,\n            2,\n        ],\n        [\n            0,\n            1,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            3,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            1,\n            1,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            1,\n            2,\n        ],\n        [\n            1,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            2,\n            2,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            1,\n            2,\n        ],\n        [59, 1, 26, 1, 28, 1, 2, 1, 12],\n        [\n            0,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            5,\n            1,\n            1,\n            2,\n            2,\n            1,\n            3,\n            1,\n            2,\n            1,\n            2,\n        ],\n        [0, 12, 1, 3, 1, 3, 1, 5, 1, 11, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 27, 1, 2],\n        [\n            1,\n            2,\n            2,\n            2,\n            2,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            3,\n            1,\n            3,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            2,\n            2,\n            2,\n            15,\n            2,\n            4,\n        ],\n        [\n            0,\n            1,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            3,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            15,\n            2,\n            4,\n        ],\n        [\n            1,\n            1,\n            3,\n            1,\n            3,\n            1,\n            14,\n            1,\n            3,\n            1,\n            1,\n            1,\n            3,\n            1,\n            14,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            18,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            14,\n            1,\n            3,\n            15,\n            1,\n            2,\n            1,\n            1,\n        ],\n        [\n            0,\n            1,\n            1,\n            3,\n            1,\n            3,\n            1,\n            10,\n            1,\n            3,\n            1,\n            3,\n            1,\n            1,\n            1,\n            3,\n            1,\n            3,\n            1,\n            10,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            14,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            10,\n            1,\n            20,\n            1,\n            1,\n            1,\n        ],\n        [\n            1,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            3,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            20,\n            3,\n        ],\n    ],\n\n    referenceDate: {\n        AD: \"1913-03-13\",\n        BS: \"1970-01-01\",\n    },\n}\n\nexport default Config\n","import Config from \"./Config\"\n\nexport default class Validator {\n    public static dateType(type: string): boolean {\n        if (![\"BS\", \"AD\"].includes(type)) {\n            throw new TypeError(\"Invalid date type. Only 'AD' or 'BS' type supported.\")\n        }\n\n        return true\n    }\n\n    public static adYear(year: number) {\n        const minAdYear = Config.minBSYear - 57\n        const maxAdYear = Config.maxBSYear - 57\n\n        if (year < minAdYear || year > maxAdYear) {\n            throw new RangeError(`AD year should be in range of ${minAdYear} to ${maxAdYear}`)\n        }\n    }\n\n    public static adMonth(month: number) {\n        if (month < 1 || month > 12) {\n            throw new RangeError(\"AD month should be in range of 1 to 12\")\n        }\n    }\n\n    public static adDay(day: number) {\n        if (day < 1 || day > 31) {\n            throw new RangeError(\"AD day should be in range of 1 to 31\")\n        }\n    }\n\n    public static bsYear(year: number) {\n        const midBsYear = Config.minBSYear\n        const maxBsYear = Config.maxBSYear\n\n        if (year < midBsYear || year > maxBsYear) {\n            throw new RangeError(`BS year should be in range of ${midBsYear} to ${maxBsYear}`)\n        }\n    }\n\n    public static bsMonth(month: number) {\n        if (month < 1 || month > 12) {\n            throw new RangeError(\"BS month should be in range of 1 to 12\")\n        }\n    }\n\n    public static bsDay(day: number) {\n        if (day < 1 || day > 32) {\n            throw new RangeError(\"BS day should be in range of 1 to 32\")\n        }\n    }\n}\n","import Config from \"./Config\"\nimport Validator from \"./Validator\"\n\ninterface DateObject {\n    year: number\n    month: number\n    day: number\n}\n\nexport default class BikramSambat {\n    private dateType: string = \"AD\"\n    private date: DateObject = { year: 0, month: 0, day: 0 }\n\n    constructor(date?: Date | string, type: string = \"AD\") {\n        if (date) {\n            this.setDate(date, type)\n        } else {\n            this.setDate(new Date())\n        }\n    }\n\n    public setDate(date: Date | string, type: string = \"AD\"): BikramSambat {\n        Validator.dateType(type)\n        if (type === \"BS\") {\n            if (typeof date !== \"string\") {\n                throw new TypeError(\"BS date should be 'string' type.\")\n            }\n\n            this.dateType = \"BS\"\n            this.date = this.splitBsDate(date)\n\n            return this\n        }\n\n        this.dateType = \"AD\"\n        this.date = this.splitAdDate(date)\n\n        return this\n    }\n\n    public toAD(): string {\n        if (this.dateType === \"AD\") {\n            return this.format(this.date)\n        }\n\n        const totalDaysSince = this.totalDaysSince()\n\n        const { year, month, day } = this.splitDate(Config.referenceDate.AD)\n        const adDate = new Date(year, month, day - 1)\n        adDate.setDate(adDate.getDate() + totalDaysSince)\n\n        return this.format(this.splitAdDate(adDate))\n    }\n\n    public toBS(): string {\n        if (this.dateType === \"BS\") {\n            return this.format(this.date)\n        }\n\n        const { year: adYear, month: adMonth, day: adDay } = this.date\n        let bsYear = adYear + 57\n        let bsMonth = (adMonth + 9) % 12 || 12\n        let bsDay = 1\n\n        if (adMonth < 4) {\n            bsYear -= 1\n        } else if (adMonth === 4) {\n            const bsNewYearAdDate = new BikramSambat(this.format({ year: bsYear, month: 1, day: 1 }), \"BS\").toAD()\n            if (adDay < new Date(bsNewYearAdDate).getDate()) {\n                bsYear -= 1\n            }\n        }\n\n        const bsFirstDayOfMonthAdDate = new Date(\n            new BikramSambat(this.format({ year: bsYear, month: bsMonth, day: 1 }), \"BS\").toAD(),\n        )\n        if (adDay >= 1 && adDay < bsFirstDayOfMonthAdDate.getDate()) {\n            bsMonth = bsMonth !== 1 ? bsMonth - 1 : 12\n            const daysInBSMonth = this.daysInBsMonth(bsYear, bsMonth)\n            bsDay = daysInBSMonth - (bsFirstDayOfMonthAdDate.getDate() - adDay) + 1\n        } else {\n            bsDay = adDay - bsFirstDayOfMonthAdDate.getDate() + 1\n        }\n\n        return this.format({ year: bsYear, month: bsMonth, day: bsDay })\n    }\n\n    /**\n     * Calculate total number of days since minimum reference date\n     */\n    private totalDaysSince(): number {\n        const { year: bsYear, month: bsMonth, day: bsDay } = this.date\n\n        let totalDays = 0\n        const diffInYears = bsYear - Config.minBSYear\n        for (let i = 1; i <= 12; i++) {\n            totalDays += this.totalMonthDaysSince(i, i < bsMonth ? diffInYears + 1 : diffInYears)\n        }\n\n        if (bsYear > 2085 && bsYear < 2088) {\n            totalDays += bsDay - 2\n        } else if (bsYear === 2085 && bsMonth > 5) {\n            totalDays += bsDay - 2\n        } else if (bsYear === 2081 && bsMonth === 3) {\n            totalDays += bsDay + 1\n        } else if (bsYear === 2081 && bsMonth === 12) {\n            totalDays += bsDay - 1\n        } else if (bsYear > 2088) {\n            totalDays += bsDay - 4\n        } else if (bsYear === 2088 && bsMonth > 5) {\n            totalDays += bsDay - 4\n        } else {\n            totalDays += bsDay\n        }\n\n        return totalDays\n    }\n\n    /**\n     * Total number of bsMonth days since minimum reference date\n     * @param bsMonth\n     * @param diffInYear\n     */\n    private totalMonthDaysSince(bsMonth: number, diffInYear: number): number {\n        if (diffInYear === 0) {\n            return 0\n        }\n\n        const monthData = Config.monthReferences[bsMonth - 1]\n\n        interface Total {\n            month: number\n            year: number\n        }\n\n        const calculated = monthData.slice(0).reduce(\n            (total: Total, monthDataItem: number, monthIndex, arr: number[]): Total => {\n                if (monthDataItem === 0) {\n                    return total\n                }\n\n                const monthTotalDaysCountIndex = monthIndex % 2\n                if (diffInYear > total.year + monthDataItem) {\n                    total.year += monthDataItem\n                    total.month += Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex] * monthDataItem\n                } else {\n                    total.month +=\n                        Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex] * (diffInYear - total.year)\n                    total.year = diffInYear - total.year\n                    arr.splice(1) // break; dont forget slice(0) before reducing https://stackoverflow.com/questions/36144406/how-to-break-on-reduce-method\n                }\n\n                return total\n            },\n            { month: 0, year: 0 },\n        )\n\n        return calculated.month\n    }\n\n    // noinspection JSMethodCanBeStatic\n    /**\n     * Returns total number of days in bsMonth for bsYear\n     * @param bsYear\n     * @param bsMonth\n     */\n    private daysInBsMonth(bsYear: number, bsMonth: number): number {\n        const totalYears = bsYear + 1 - Config.minBSYear\n        const monthData = Config.monthReferences[bsMonth - 1]\n\n        let yearCount = 0\n        for (let i = 0; i < monthData.length; i++) {\n            if (monthData[i] === 0) {\n                continue\n            }\n\n            const monthTotalDaysCountIndex = i % 2\n            yearCount += monthData[i]\n            if (totalYears <= yearCount) {\n                if ((bsYear === 2085 && bsMonth === 5) || (bsYear === 2088 && bsMonth === 5)) {\n                    return Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex] - 2\n                } else if (bsYear === 2081 && bsMonth === 2) {\n                    return Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex + 1]\n                } else if (bsYear === 2081 && bsMonth === 3) {\n                    return Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex - 1]\n                } else if (bsYear === 2081 && bsMonth === 11) {\n                    return Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex] - 1\n                } else if (bsYear === 2081 && bsMonth === 12) {\n                    return Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex] + 1\n                } else {\n                    return Config.bsMonthTotalDaysCount[bsMonth - 1][monthTotalDaysCountIndex]\n                }\n            }\n        }\n\n        return 0\n    }\n\n    private splitDate(date: string): DateObject {\n        // tslint:disable-next-line:radix\n        const [year, month, day]: number[] = date\n            .replace(/\\//g, \"-\")\n            .split(\"-\")\n            .map(d => Math.floor(Number(d)))\n\n        return { year, month, day }\n    }\n\n    // noinspection JSMethodCanBeStatic\n    private splitAdDate(date: Date | string): DateObject {\n        if (typeof date === \"string\") {\n            date = new Date(date)\n        }\n\n        const year: number = date.getFullYear()\n        const month: number = date.getMonth() + 1\n        const day: number = date.getDate()\n\n        Validator.adYear(year)\n        Validator.adMonth(month)\n        Validator.adDay(day)\n\n        return { year, month, day }\n    }\n\n    private splitBsDate(date: string): DateObject {\n        const { year, month, day } = this.splitDate(date)\n\n        Validator.bsYear(year)\n        Validator.bsMonth(month)\n        Validator.bsDay(day)\n\n        return { year, month, day }\n    }\n\n    private format(date: DateObject): string {\n        const separator: string = Config.outputSeparator\n        const { year, month, day } = date\n\n        return `${year}${separator}${this.zeroPad(month)}${separator}${this.zeroPad(day)}`\n    }\n\n    // noinspection JSMethodCanBeStatic\n    private zeroPad(x: number): string {\n        return x > 9 ? `${x}` : `0${x}`\n    }\n}\n","import BikramSambat from \"./BikramSambat\"\n\nexport const BSToAD = (date: string): string => {\n    return new BikramSambat().setDate(date, \"BS\").toAD()\n}\n\nexport const ADToBS = (date: Date | string): string => {\n    return new BikramSambat().setDate(date, \"AD\").toBS()\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}